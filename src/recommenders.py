# -*- coding: utf-8 -*-
"""recommenders.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vFXP7MpDDgB8_z8RDLWIVEmmcc2b2pWO
"""


import pandas as pd
import numpy as np

# Для работы с матрицами
from scipy.sparse import csr_matrix

# Матричная факторизация
from implicit.als import AlternatingLeastSquares
from implicit.nearest_neighbours import ItemItemRecommender  # нужен для одного трюка
from implicit.nearest_neighbours import bm25_weight, tfidf_weight

RANDOM_STATE = 42

class MainRecommender:
    """Рекоммендации, которые можно получить из ALS

    Input
    -----
    user_item_matrix: pd.DataFrame
        Матрица взаимодействий user-item
    """

    def __init__(self, data, weighting=True, fake_id=999999):

        # your_code. Это не обязательная часть. Но если вам удобно что-либо посчитать тут - можно это сделать
        # Топ покупок каждого юзера
        self.top_purchases = data.groupby(['user_id', 'item_id'])['quantity'].count().reset_index()
        self.top_purchases.sort_values('quantity', ascending=False, inplace=True)
        self.top_purchases = self.top_purchases[self.top_purchases['item_id'] != fake_id]

        # Топ покупок по всему датасету
        self.overall_top_purchases = data.groupby('item_id')['quantity'].count().reset_index()  
        self.overall_top_purchases.sort_values('quantity', ascending=False, inplace=True)
        self.overall_top_purchases = self.overall_top_purchases[self.overall_top_purchases['item_id'] != fake_id]
        self.overall_top_purchases = self.overall_top_purchases.item_id.tolist()

        self.user_item_matrix = self.prepare_matrix(data)  # pd.DataFrame
        self.id_to_itemid, self.id_to_userid, \
            self.itemid_to_id, self.userid_to_id = self.prepare_dicts(self.user_item_matrix)

        if weighting:
            self.user_item_matrix = bm25_weight(self.user_item_matrix.T).T

        self.model = self.fit(self.user_item_matrix)
        self.own_recommender = self.fit_own_recommender(self.user_item_matrix)

    @staticmethod
    def prepare_matrix(data):

        # your_code
      user_item_matrix = pd.pivot_table(data,
                                  index='user_id', columns='item_id',
                                  values='quantity', 
                                  aggfunc='count',
                                  fill_value=0
                                 )
      user_item_matrix = user_item_matrix.astype(float)
      return user_item_matrix

    @staticmethod
    def prepare_dicts(user_item_matrix):
        """Подготавливает вспомогательные словари"""

        userids = user_item_matrix.index.values
        itemids = user_item_matrix.columns.values

        matrix_userids = np.arange(len(userids))
        matrix_itemids = np.arange(len(itemids))

        id_to_itemid = dict(zip(matrix_itemids, itemids))
        id_to_userid = dict(zip(matrix_userids, userids))

        itemid_to_id = dict(zip(itemids, matrix_itemids))
        userid_to_id = dict(zip(userids, matrix_userids))

        return id_to_itemid, id_to_userid, itemid_to_id, userid_to_id

    @staticmethod
    def fit_own_recommender(user_item_matrix):
        """Обучает модель, которая рекомендует товары, среди товаров, купленных юзером"""

        own_recommender = ItemItemRecommender(K=1, num_threads=4)
        own_recommender.fit(csr_matrix(user_item_matrix).T.tocsr())

        return own_recommender

    @staticmethod
    def fit(user_item_matrix, n_factors=50, regularization=0.001, iterations=5, num_threads=4, random_state=RANDOM_STATE):
        """Обучает ALS"""

        model = AlternatingLeastSquares(factors=n_factors,
                                        regularization=regularization,
                                        iterations=iterations,
                                        calculate_training_loss=True,
                                        num_threads=num_threads,
                                        random_state=random_state)
        model.fit(csr_matrix(user_item_matrix).T.tocsr())

        return model

    def _update_dict(self, user_id):

      if user_id not in self.userid_to_id.keys():
        max_id = max(list(self.userid_to_id.values()))
        max_id +=1
        self.userid_to_id.update({user_id:max_id})
        self.id_to_userid.update({max_id:user_id})


    def get_rec(self, x):

      recs = self.model.similar_items(self.itemid_to_id[x], N=2)
      top_rec = recs[1][0]
      return self.id_to_itemid[top_rec]


    def extend_with_top_popular(self, recommendations, N=5):
      
      if len(recommendations) < N:
        top_popular = [rec for rec in self.overall_top_purchases[:N] if rec not in recommendations]
        recommendations.extend(top_popular)
        recommendations = recommendations[:N]
      return recommendations


    def get_recommendations(self,user, model, sparse_user_item, N=5):
      
      if np.isin(user, self.userid_to_id) is False:
        self._update_dict(user_id=user)
      
      filter_items=[] if self.fake_id is not None else [self.itemid_to_id[self.fake_id]]

      res =  model.recommend(userid=self.userid_to_id[user],
                                    user_items=sparse_user_item[self.userid_to_id[user]],
                                    N=N,
                                    filter_already_liked_items=False,
                                    filter_items=[self.itemid_to_id[999999]],
                                    recalculate_user=True)
      mask = res[1].argsort()[::-1]
      res = [self.id_to_itemid[rec] for rec in res[0][mask]]
      res = self.extend_with_top_popular(res, N=N)

      assert len(res) == N, 'Количество рекомендаций != {}'.format(N)
      return res


    def get_als_recommendations(self, user, N=5):
       
      self._update_dict(user_id=user)
      return self._get_recommendations(user, model=self.model, N=N) 


    def get_own_recommendations(self, user, N=5):
      
      self._update_dict(user_id=user)
      return self._get_recommendations(user, model=self.own_recommender, N=N)     


    def get_similar_items_recommendation(self, data, user, model, itemid_to_id, id_to_itemid, N=5):

        if np.isin(user, self.userid_to_id) is False:
          self._update_dict(user_id=user) 
       
        top_users_purchases = self.top_purchases[self.top_purchases['user_id'] == user].head(N)
        res = top_users_purchases['item_id'].apply(lambda x: self.get_rec(x)).tolist()
        res = self._extend_with_top_popular(res, N=N) 

        assert len(res) == N, 'Количество рекомендаций != {}'.format(N)
        return res


    def get_similar_users_recommendation(self, user, N=5):

        if np.isin(user, self.userid_to_id) is False:
          self._update_dict(user_id=user)    

        similar_users = self.model.similar_users(self.userid_to_id[user], N=N+1)
        similar_users = [rec[0] for rec in similar_users]
        similar_users = similar_users[1:]#первый пользователь - это он сам

        own = ItemItemRecommender(K=1, num_threads=4) # K - кол-во билжайших соседей
        own.fit(csr_matrix(self.user_item_matrix).T.tocsr(), show_progress=False)
        # your_code
        res = []
    
        for user in similar_users:
            sparse_user_item = csr_matrix(self.user_item_matrix).tocsr()
            rec = self.get_recommendations(user, own, sparse_user_item,  N=N)
            res.append(rec[0])

        assert len(res) == N, 'Количество рекомендаций != {}'.format(N)
        return res